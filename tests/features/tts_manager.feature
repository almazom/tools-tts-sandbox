# language: ru

Функционал: TTS Manager - Генерация Аудио из Текста
  Как пользователь системы
  Я хочу конвертировать текст в речь
  Чтобы создавать аудио контент для подкастов

  Предыстория:
    Допустим API ключ Gemini установлен
    И выходная директория "./outputs" существует
    И все зависимости установлены

  #═══════════════════════════════════════════════════════════════
  # КРИТИЧЕСКИЕ СЦЕНАРИИ
  #═══════════════════════════════════════════════════════════════

  @критический @одиночный-спикер
  Сценарий: Успешная генерация аудио с одним спикером
    Допустим пользователь хочет создать аудио из текста
    И текст: "Привет, мир! Это тестовое сообщение."
    И провайдер: "gemini"
    И количество спикеров: 1
    И голос спикера 1: "Zephyr"
    Когда пользователь запускает команду генерации
    Тогда аудио файл должен быть создан
    И формат файла должен быть "WAV"
    И размер файла должен быть больше 0 байт
    И файл должен иметь корректный WAV заголовок
    И система должна вывести сообщение об успехе

  @критический @мультиспикер
  Сценарий: Успешная генерация мультиспикер подкаста
    Допустим пользователь хочет создать диалог двух спикеров
    И текст скрипта:
      """
      Ведущий: Добро пожаловать в наш подкаст!
      Гость: Спасибо, что пригласили!
      """
    И провайдер: "gemini"
    И количество спикеров: 2
    И голос спикера 1: "Zephyr"
    И голос спикера 2: "Puck"
    Когда пользователь запускает команду генерации
    Тогда аудио файл должен быть создан
    И аудио должно содержать оба голоса
    И длительность аудио должна быть примерно 10 секунд
    И качество аудио должно быть 24kHz

  @критический @валидация
  Сценарий: Ошибка при невалидном голосе
    Допустим пользователь указал несуществующий голос "InvalidVoice"
    Когда пользователь запускает команду генерации
    Тогда система должна вывести ошибку валидации
    И сообщение об ошибке должно содержать "Invalid voice"
    И список доступных голосов должен быть показан
    И аудио файл НЕ должен быть создан

  #═══════════════════════════════════════════════════════════════
  # ПАРАМЕТРЫ И КОНФИГУРАЦИЯ
  #═══════════════════════════════════════════════════════════════

  @параметры @температура
  Сценарий: Настройка температуры голоса для вариативности
    Допустим текст: "Это тест настройки температуры"
    И провайдер: "gemini"
    И голос: "Charon"
    И температура: 0.5
    Когда пользователь генерирует аудио
    Тогда аудио должно быть создано с низкой вариативностью
    И параметр температуры должен быть передан в API

  @параметры @стиль
  Сценарий: Применение пользовательского стиля речи
    Допустим текст: "Важное объявление!"
    И провайдер: "gemini"
    И стиль: "профессиональный и авторитетный"
    И тон: "серьезный"
    И темп: "медленный"
    Когда пользователь генерирует аудио
    Тогда стиль должен быть применен к генерации
    И аудио должно звучать профессионально

  #═══════════════════════════════════════════════════════════════
  # ПРОВАЙДЕРЫ TTS
  #═══════════════════════════════════════════════════════════════

  @провайдер @minimax
  Сценарий: Генерация с MiniMax провайдером (один спикер)
    Допустим провайдер: "minimax"
    И текст: "Тест MiniMax TTS"
    И количество спикеров: 1
    И эмоция: "happy"
    И скорость: 1.2
    И громкость: 1.0
    Когда пользователь генерирует аудио
    Тогда аудио должно быть создано через MiniMax API
    И эмоция "happy" должна быть применена
    И скорость речи должна быть увеличена

  @провайдер @ограничения
  Сценарий: MiniMax не поддерживает мультиспикер
    Допустим провайдер: "minimax"
    И количество спикеров: 2
    Когда пользователь пытается генерировать аудио
    Тогда система должна вывести ошибку
    И сообщение должно содержать "MiniMax does not support multi-speaker"
    И предложение использовать Gemini должно быть показано

  #═══════════════════════════════════════════════════════════════
  # ФОРМАТЫ ВЫВОДА
  #═══════════════════════════════════════════════════════════════

  @форматы @wav
  Сценарий: Генерация в формате WAV
    Допустим текст: "Тест WAV формата"
    И формат вывода: "wav"
    Когда пользователь генерирует аудио
    Тогда файл должен иметь расширение ".wav"
    И WAV заголовок должен быть корректным
    И аудио параметры: 16-bit PCM, 24kHz, Mono

  @форматы @mp3
  Сценарий: Генерация в формате MP3
    Допустим текст: "Тест MP3 формата"
    И формат вывода: "mp3"
    Когда пользователь генерирует аудио
    Тогда файл должен иметь расширение ".mp3"
    И формат должен быть валидным MP3
    И размер файла должен быть меньше WAV

  #═══════════════════════════════════════════════════════════════
  # ОБРАБОТКА ОШИБОК
  #═══════════════════════════════════════════════════════════════

  @ошибки @api-ключ
  Сценарий: Отсутствующий API ключ
    Допустим API ключ Gemini НЕ установлен
    И текст: "Тест без ключа"
    Когда пользователь пытается генерировать аудио
    Тогда система должна вывести ошибку "GEMINI_API_KEY not set"
    И инструкция по установке ключа должна быть показана
    И код возврата должен быть не равен 0

  @ошибки @сеть
  Сценарий: Ошибка сети при обращении к API
    Допустим Gemini API недоступен
    И текст: "Тест сетевой ошибки"
    Когда пользователь генерирует аудио
    Тогда система должна вывести ошибку подключения
    И предложение проверить сеть должно быть показано
    И система должна предложить повторить попытку

  @ошибки @rate-limit
  Сценарий: Превышен лимит запросов к API
    Допустим API вернул ошибку 429 (Too Many Requests)
    Когда пользователь генерирует аудио
    Тогда система должна распознать rate limit ошибку
    И сообщение о превышении лимита должно быть показано
    И предложение повторить позже должно быть выведено

  #═══════════════════════════════════════════════════════════════
  # ФАЙЛОВЫЕ ОПЕРАЦИИ
  #═══════════════════════════════════════════════════════════════

  @файлы @ввод
  Сценарий: Чтение текста из файла
    Допустим текстовый файл "script.txt" существует
    И файл содержит:
      """
      Ведущий: Сегодня мы обсудим искусственный интеллект.
      Эксперт: Это действительно захватывающая тема!
      """
    Когда пользователь указывает файл как источник текста
    Тогда текст должен быть прочитан из файла
    И генерация должна использовать содержимое файла
    И аудио должно быть успешно создано

  @файлы @вывод
  Сценарий: Пользовательское имя выходного файла
    Допустим пользователь указал имя файла "мой_подкаст.wav"
    И текст: "Кастомное имя файла"
    Когда пользователь генерирует аудио
    Тогда файл должен быть создан с именем "мой_подкаст.wav"
    И файл должен находиться в указанной директории

  @файлы @директория
  Сценарий: Создание выходной директории если не существует
    Допустим выходная директория "./новая_папка" не существует
    И текст: "Тест создания директории"
    Когда пользователь генерирует аудио
    Тогда директория "./новая_папка" должна быть создана
    И аудио файл должен быть сохранен в новой директории

  #═══════════════════════════════════════════════════════════════
  # ГОЛОСА И ПЕРСОНАЛИЗАЦИЯ
  #═══════════════════════════════════════════════════════════════

  Структура сценария: Генерация с различными голосами Gemini
    Допустим провайдер: "gemini"
    И текст: "Тест голоса <голос>"
    И голос: "<голос>"
    Когда пользователь генерирует аудио
    Тогда аудио должно быть создано с голосом "<голос>"
    И характеристики голоса должны соответствовать описанию

    Примеры:
      | голос   | характеристика          |
      | Zephyr  | естественный            |
      | Puck    | дружелюбный             |
      | Charon  | профессиональный        |
      | Kore    | теплый                  |
      | Fenrir  | драматичный             |
      | Aoede   | музыкальный             |

  #═══════════════════════════════════════════════════════════════
  # CLI ИНТЕРФЕЙС
  #═══════════════════════════════════════════════════════════════

  @cli @help
  Сценарий: Отображение справки
    Когда пользователь запускает "./scripts/tts-manager.sh --help"
    Тогда должна быть показана справочная информация
    И список всех доступных параметров
    И примеры использования
    И описание голосов

  @cli @verbose
  Сценарий: Детальный вывод в verbose режиме
    Допустим текст: "Verbose тест"
    И режим verbose включен
    Когда пользователь генерирует аудио
    Тогда должна быть показана подробная информация
    И логи API запросов
    И информация о прогрессе генерации

  @cli @dry-run
  Сценарий: Dry-run режим без реальной генерации
    Допустим текст: "Dry run тест"
    И dry-run режим включен
    Когда пользователь запускает команду
    Тогда конфигурация должна быть показана
    И аудио файл НЕ должен быть создан
    И API запросы НЕ должны быть отправлены
