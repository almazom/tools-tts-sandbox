# language: ru

Функционал: Podcast Generator - AI-генерация Подкастов
  Как создатель контента
  Я хочу генерировать подкасты с использованием AI
  Чтобы автоматизировать создание аудио контента

  Предыстория:
    Допустим AI CLI (Claude/Gemini/Qodercli) установлен
    И TTS Manager настроен и работает
    И YAML промпты загружены
    И API ключи установлены

  #═══════════════════════════════════════════════════════════════
  # ТИПЫ ПОДКАСТОВ
  #═══════════════════════════════════════════════════════════════

  @критический @интервью
  Сценарий: Генерация интервью подкаста
    Допустим тема: "Будущее искусственного интеллекта"
    И тип подкаста: "interview"
    И длительность: 15 минут
    И количество спикеров: 2
    И AI провайдер: "claude"
    Когда пользователь генерирует подкаст
    Тогда скрипт должен быть сгенерирован AI
    И скрипт должен содержать диалог "Ведущий:" и "Гость:"
    И скрипт должен быть примерно 2500 слов
    И аудио файл должен быть создан
    И длительность аудио должна быть около 15 минут

  @образовательный
  Сценарий: Генерация образовательного подкаста
    Допустим тема: "Квантовые вычисления для начинающих"
    И тип подкаста: "educational"
    И длительность: 10 минут
    И спикеры: учитель и ученик
    Когда пользователь генерирует подкаст
    Тогда скрипт должен содержать объяснения концепций
    И вопросы для прояснения
    И практические примеры
    И структура должна быть: введение → концепты → применение → итоги

  @новости
  Сценарий: Генерация новостного подкаста
    Допустим тема: "Последние достижения в области возобновляемой энергии"
    И тип подкаста: "news"
    И длительность: 12 минут
    Когда пользователь генерирует подкаст
    Тогда скрипт должен содержать факты и цифры
    И анализ экспертов
    И различные перспективы
    И прогнозы на будущее

  @сторителлинг
  Сценарий: Генерация повествовательного подкаста
    Допустим тема: "История расшифровки Энигмы во Второй мировой войне"
    И тип подкаста: "storytelling"
    И длительность: 15 минут
    Когда пользователь генерирует подкаст
    Тогда скрипт должен иметь драматическую структуру
    И описательный язык
    И эмоциональные реакции рассказчика
    И развитие сюжета с кульминацией

  #═══════════════════════════════════════════════════════════════
  # ИСТОЧНИКИ ВВОДА
  #═══════════════════════════════════════════════════════════════

  @ввод @текст
  Сценарий: Генерация из простого текстового топика
    Допустим топик: "Блокчейн технологии"
    Когда пользователь генерирует подкаст
    Тогда AI должен расширить топик до полного скрипта
    И скрипт должен покрывать основные аспекты блокчейна
    И длительность должна соответствовать настройкам

  @ввод @файл @pdf
  Сценарий: Конвертация PDF исследования в подкаст
    Допустим PDF файл "research_paper.pdf" существует
    И файл содержит научное исследование
    И тип подкаста: "interview"
    Когда пользователь конвертирует PDF в подкаст
    Тогда текст должен быть извлечен из PDF
    И AI должен создать доступное объяснение
    И сложные термины должны быть разъяснены
    И аудио должно быть создано

  @ввод @файл @docx
  Сценарий: Конвертация DOCX документа в подкаст
    Допустим DOCX файл "manuscript.docx" существует
    Когда пользователь генерирует подкаст из файла
    Тогда содержимое должно быть прочитано
    И форматирование должно быть учтено
    И скрипт должен быть сгенерирован

  #═══════════════════════════════════════════════════════════════
  # AI ПРОВАЙДЕРЫ
  #═══════════════════════════════════════════════════════════════

  @ai-провайдер @auto-detect
  Сценарий: Автоопределение доступного AI провайдера
    Допустим AI провайдер установлен на "auto"
    И Claude CLI доступен в системе
    Когда пользователь генерирует подкаст
    Тогда система должна обнаружить Claude
    И использовать Claude для генерации скрипта

  @ai-провайдер @fallback
  Сценарий: Переключение на резервный AI провайдер
    Допустим основной провайдер (Claude) недоступен
    И резервный провайдер (Gemini) доступен
    Когда пользователь генерирует подкаст
    Тогда система должна переключиться на Gemini
    И подкаст должен быть успешно сгенерирован

  @ai-провайдер @кастомный-промпт
  Сценарий: Использование пользовательского промпта
    Допустим пользователь предоставил кастомный промпт:
      """
      Создай веселый, для новичков разговор о машинном обучении
      с большим количеством примеров и аналогий
      """
    Когда пользователь генерирует подкаст с кастомным промптом
    Тогда AI должен использовать кастомный промпт
    И шаблон по умолчанию НЕ должен быть применен
    И скрипт должен соответствовать указаниям

  #═══════════════════════════════════════════════════════════════
  # ПРОМПТ СИСТЕМА
  #═══════════════════════════════════════════════════════════════

  @промпты @yaml
  Сценарий: Загрузка и парсинг YAML промптов
    Допустим YAML файл промптов существует
    И содержит шаблон для типа "interview"
    Когда система загружает промпты
    Тогда YAML должен быть корректно распарсен
    И шаблон должен быть извлечен
    И переменные должны быть заменены

  @промпты @валидация
  Сценарий: Валидация YAML схемы промптов
    Допустим YAML файл содержит ошибки синтаксиса
    Когда система пытается загрузить промпты
    Тогда ошибка парсинга должна быть обнаружена
    И понятное сообщение об ошибке должно быть выведено
    И строка с ошибкой должна быть указана

  #═══════════════════════════════════════════════════════════════
  # TTS ИНТЕГРАЦИЯ
  #═══════════════════════════════════════════════════════════════

  @tts @интеграция
  Сценарий: Полный пайплайн от топика до аудио
    Допустим топик: "История джаза"
    И тип: "storytelling"
    И голоса: "Fenrir" и "Zephyr"
    Когда пользователь запускает полную генерацию
    Тогда скрипт должен быть сгенерирован AI
    И скрипт должен быть сохранен в temp директорию
    И TTS Manager должен быть вызван со скриптом
    И аудио файл должен быть создан
    И оба файла (скрипт + аудио) должны существовать

  @tts @только-скрипт
  Сценарий: Генерация только скрипта без аудио
    Допустим топик: "Космические исследования"
    И режим "script-only" включен
    Когда пользователь генерирует подкаст
    Тогда только скрипт должен быть сгенерирован
    И TTS НЕ должен быть вызван
    И аудио файл НЕ должен быть создан
    И скрипт должен быть доступен для редактирования

  @tts @редактирование
  Сценарий: Редактирование скрипта перед генерацией аудио
    Допустим скрипт уже сгенерирован
    И пользователь отредактировал скрипт
    Когда пользователь генерирует аудио из отредактированного скрипта
    Тогда TTS должен использовать отредактированную версию
    И изменения должны быть отражены в аудио

  #═══════════════════════════════════════════════════════════════
  # ГОЛОСА И ПЕРСОНАЛИЗАЦИЯ
  #═══════════════════════════════════════════════════════════════

  @голоса @подбор
  Сценарий: Автоподбор голосов по типу контента
    Допустим тип подкаста: "interview"
    И тема: "Бизнес-стратегии"
    Когда пользователь НЕ указал конкретные голоса
    Тогда система должна выбрать профессиональные голоса
    И рекомендация должна быть: Charon и Orus
    И обоснование выбора должно быть выведено

  @голоса @стиль
  Сценарий: Применение стиля к TTS генерации
    Допустим топик: "Мотивационная речь"
    И стиль TTS: "вдохновляющий и мотивирующий"
    И тон: "уверенный и поднимающий настроение"
    Когда генерируется аудио
    Тогда стиль должен быть передан в TTS Manager
    И аудио должно звучать вдохновляюще

  #═══════════════════════════════════════════════════════════════
  # ОБРАБОТКА ОШИБОК
  #═══════════════════════════════════════════════════════════════

  @ошибки @ai-недоступен
  Сценарий: Ошибка когда AI CLI не установлен
    Допустим ни один AI CLI не найден в системе
    Когда пользователь пытается генерировать подкаст
    Тогда ошибка "No AI CLI tool found" должна быть выведена
    И инструкции по установке должны быть показаны
    И список поддерживаемых AI CLI должен быть выведен

  @ошибки @tts-провал
  Сценарий: Обработка ошибки TTS при успешной генерации скрипта
    Допустим скрипт успешно сгенерирован
    Но TTS Manager возвращает ошибку
    Когда пользователь генерирует подкаст
    Тогда скрипт должен быть сохранен
    И предупреждение о проблеме TTS должно быть выведено
    И скрипт должен быть доступен для ручной генерации

  @ошибки @некорректный-тип
  Сценарий: Ошибка при несуществующем типе подкаста
    Допустим пользователь указал тип "invalid_type"
    Когда система пытается загрузить промпт
    Тогда ошибка "Podcast type not found" должна быть выведена
    И список доступных типов должен быть показан

  #═══════════════════════════════════════════════════════════════
  # КАЧЕСТВО СКРИПТОВ
  #═══════════════════════════════════════════════════════════════

  @качество @длина
  Сценарий: Проверка соответствия длины скрипта заданной длительности
    Допустим длительность подкаста: 10 минут
    Когда скрипт генерируется
    Тогда количество слов должно быть около 1600 (160 слов/мин)
    И длина должна быть в пределах ±10%

  @качество @структура
  Сценарий: Валидация структуры мультиспикер скрипта
    Допустим тип: "interview"
    И количество спикеров: 2
    Когда скрипт генерируется
    Тогда скрипт должен содержать метки спикеров
    И формат должен быть "Спикер: текст"
    И оба спикера должны иметь примерно равное время
    И должны быть естественные переходы

  @качество @содержание
  Сценарий: Проверка релевантности контента теме
    Допустим тема: "Квантовая физика"
    Когда скрипт генерируется
    Тогда контент должен быть релевантен квантовой физике
    И должны быть упомянуты ключевые концепты
    И информация должна быть фактически корректной

  #═══════════════════════════════════════════════════════════════
  # ФАЙЛОВЫЕ ОПЕРАЦИИ
  #═══════════════════════════════════════════════════════════════

  @файлы @именование
  Сценарий: Автоматическое именование выходных файлов
    Допустим пользователь НЕ указал имя файла
    И тип подкаста: "interview"
    Когда подкаст генерируется
    Тогда скрипт должен иметь имя "interview_YYYYMMDD_HHMMSS_script.txt"
    И аудио должно иметь имя "interview_YYYYMMDD_HHMMSS.wav"
    И timestamp должен соответствовать времени создания

  @файлы @кастомное-имя
  Сценарий: Использование пользовательского имени файла
    Допустим пользователь указал имя "мой_подкаст"
    Когда подкаст генерируется
    Тогда файлы должны быть названы "мой_подкаст_script.txt" и "мой_подкаст.wav"

  #═══════════════════════════════════════════════════════════════
  # ПРОИЗВОДИТЕЛЬНОСТЬ
  #═══════════════════════════════════════════════════════════════

  @производительность @время
  Сценарий: Генерация подкаста в разумные сроки
    Допустим подкаст длительностью 10 минут
    Когда пользователь генерирует подкаст
    Тогда генерация скрипта должна занять менее 60 секунд
    И генерация аудио должна занять менее 120 секунд
    И общее время должно быть менее 3 минут

  #═══════════════════════════════════════════════════════════════
  # ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ
  #═══════════════════════════════════════════════════════════════

  @пример @быстрый-старт
  Сценарий: Простейший способ создать подкаст
    Допустим новый пользователь хочет создать первый подкаст
    Когда пользователь запускает:
      """
      ./scripts/podcast-generator.sh -t "История искусственного интеллекта"
      """
    Тогда интервью подкаст должен быть создан
    И с настройками по умолчанию
    И аудио файл должен быть готов к прослушиванию

  @пример @полная-конфигурация
  Сценарий: Подкаст с полной кастомизацией
    Когда пользователь запускает команду с полными параметрами:
      """
      ./scripts/podcast-generator.sh \
        -t "Будущее возобновляемой энергии" \
        --type interview \
        -d 15 \
        --ai claude \
        --tts gemini \
        --voice-1 Charon \
        --voice-2 Kore \
        --style "профессиональный бизнес-подкаст" \
        -o энергия_будущего
      """
    Тогда все параметры должны быть применены корректно
    И результат должен соответствовать спецификациям
